<div class="container-fluid" id="patientMedicalAnalysis_page">

    <div class="wrapper d-none">
		<h1 class="title-medium"><%= UI_DISPLAY_LANG.views.pages.add_patients.sectionTitle %></h1>
	</div>

    <div class="alert alert-info my-2" style="display:none;" id="ERROR_BOX">
        <img src="assets/img/utils/info.png" class="alert-icon" alt="">
        <div class="alert-text" id="text"></div>
    </div>

	<div class="row gx-4 gy-5">

        <div class="col-lg-6 col-md-6">

            <div style="max-width: 420px; margin: 0 auto 1em auto;" id="print_page"> 
        
            </div>

            <div class="has-text-centered p-5 border rounded" data-perm="print_medical_analysis">
                <a href="#" id="print_button"><%= UI_DISPLAY_LANG.views.pages.global.text2 %></a>
            </div>

        </div>

        <div class="col-lg col-md">

            <div class="app-block">

                <div id="pagination" class="my-3 flex flex-center"></div>

                <form action="" id="create_analysis_form">

                    <div class="mb-4">
                        <%- include(SETTINGS.UI_Settings.MAIN_DIR_NAME+'views/templates/select-center-clients.template.ejs', {
                            selectId: 'patient_select',
                        }) -%>
                    </div>

                    <div class="row gx-4 gy-5" id="table_element">

                    </div>

                    <div class="mt-2">
                        <input type="submit" class="btn btn-primary btn-sm" value="<%= UI_DISPLAY_LANG.views.pages.global.save_changes_button %>">
                    </div>

                </form>

            </div>

        </div>

    </div>

</div>

<script>

$(async function()
{

var page_container = $('#patientMedicalAnalysis_page')

if ( !page_container[0] ) return

var ERROR_BOX = page_container.find('#ERROR_BOX')
var print_page = page_container.find('#print_page')
var print_button = page_container.find('#print_button')

var pagination = page_container.find('#pagination')
var table_element = page_container.find('#table_element')
var create_analysis_form = page_container.find('#create_analysis_form')
var patient_search = page_container.find('#patient_search')
var patient_select = page_container.find('#patient_select')

var PatientMedicalAnalysis = sessionData()

let MEDICAL_ANALYSIS_PROMISE
// clear session data
sessionData(true)
// create_analysis_form
create_analysis_form.on('submit', async e =>
{
    e.preventDefault()
    
    SectionLoader(create_analysis_form)

    // update
    if ( PatientMedicalAnalysis.id )
    {
        var res = await PATIENT_MEDICAL_ANALYSIS_MODEL.update({
            id: PatientMedicalAnalysis.id,
            clinicId: USER_CONFIG.administration.clinicId,
            patientId: patient_select.find(':selected').val(),
            employee_id: USER_CONFIG.employee_id,
            analysis: JSON.stringify( getChecked() )
        })
        SectionLoader(create_analysis_form, '')

        ERROR_BOX.show(0).delay(7*1000).hide(0).find('#text').text(res.message)
        PatientMedicalAnalysis.id = null
        return
    }
    // store

    var res = await PATIENT_MEDICAL_ANALYSIS_MODEL.store({
        clinicId: USER_CONFIG.administration.clinicId,
        patientId: patient_select.find(':selected').val(),
        employee_id: USER_CONFIG.employee_id,
        analysis: JSON.stringify( getChecked() )
    })
    SectionLoader(create_analysis_form, '')

    ERROR_BOX.show(0).delay(7*1000).hide(0).find('#text').text(res.message)
})
// append print template
print_page.html( await (getPage('../views/prints/medical-analysis-page.ejs')) )

var medical_analysis = print_page.find('.prescription-print')
var analysis_list = medical_analysis.find('#analysis_list')

medical_analysis.find('#presc_date').text(CURRENT_DATE)
medical_analysis.find('#center_stamp').attr('src', USER_CONFIG.administration.clinicStamp)

let promise1
let promise2

// table_element
table_element.on('click', e =>
{
    var target = $(e.target)

    if ( target.data('role') == 'check' )
    {
        var parent = target.closest('[data-role="row"]')
        var medical_analysis = target.closest('[data-role="medical_analysis"]')

        if ( !target.prev().is(':checked') )
            appendItem({
                category: {
                    id: parent.data('id'),
                    name: parent.data('name')
                },
                item: {
                    id: medical_analysis.data('id'),
                    name: medical_analysis.data('name')
                }
            })
        else
            removeItem({
                category: {
                    id: parent.data('id'),
                    name: parent.data('name')
                },
                item: {
                    id: medical_analysis.data('id'),
                    name: medical_analysis.data('name')
                }
            })
    }
})
// print
print_button.on('click', e =>
{
    printHTMLToPdf( medical_analysis[0].outerHTML, {
        top: 10000,
        left: 10000,
        page: {
            size: 'A4 landscape',
            margin: '-1cm 0 -4cm -1cm'
        }
    } )
})
// select patient
patient_select.on('change', e =>
{
    var selected = patient_select.find(':selected')

    var data = checkJSON( decodeURIComponent( atob( selected.data('object') ) ) )

    medical_analysis.find('#patient_first').text( data.patientName )
    medical_analysis.find('#patient_age').text( data.patientAge )
})
// display all
displayAll()
async function displayAll()
{
    MEDICAL_ANALYSIS_PROMISE = MEDICAL_ANALYSIS_CATEGORY_MODEL.index()

    var res = await MEDICAL_ANALYSIS_PROMISE

    if ( res.code == 404 ) return

    var data = res.data
    var html = ''

    for (let i = 0; i < data.length; i++) 
    {
        const category = data[i];
        
        html += `<div class="col-lg-4 col-md-6" data-role="row" data-id="${category.id}" data-name="${category.name}">
                    <h5 class="h4 mb-3">${category.name}</h5>`

        if ( category.medical_analyses )
        {
            html += `<ul class="list-group list-group-flush">`
            for (let j = 0; j < category.medical_analyses.length; j++) 
            {
                const medical_analysis = category.medical_analyses[j];
                
                html += `<li class="list-group-item d-flex is-justify-content-space-between" data-role="medical_analysis" data-id="${medical_analysis.id}" data-name="${medical_analysis.name}">
                            <div class="form-check" >
                                <input class="form-check-input" type="checkbox" value="" id="checkbox_${medical_analysis.id}">
                                <label class="form-check-label" for="checkbox_${medical_analysis.id}" data-role="check">
                                    ${medical_analysis.name}
                                </label>
                            </div>
                        </li>`
            }
            html+= `</ul>`
        }

        html += `</div>PAG_SEP`
    }

    new SmoothPagination(pagination, table_element, {
        data: html.split('PAG_SEP')
    })
}
// append item
function appendItem(options)
{
    // check category
    if ( !analysis_list.find('#category_'+options.category.id)[0] )
    {
        analysis_list.append(`
            <div class="col-md-4" id="category_${options.category.id}">    
                <h6 class="medical-analysis-category-name">${options.category.name}</h6>
            </div>
        `)
    }
    // check item
    if ( !analysis_list.find('#item_'+options.item.id)[0] )
    {
        analysis_list.find('#category_'+options.category.id)
        .append(`<p id="item_${options.item.id}" class="medical-analysis-name">${options.item.name}</p>`)
    }
}
// remove item
function removeItem(options)
{
    var parent = analysis_list.find('#item_'+options.item.id).closest('#category_'+options.category.id)
    // remove item
    if ( analysis_list.find('#item_'+options.item.id)[0] ) 
        analysis_list.find('#item_'+options.item.id).remove()
    // remove category name if all children removed
    // console.log( parent.children() -1 )
    if ( parent.children().length -1 == 0 )
    {
        parent.remove()
    }
}
// selected 
function getChecked()
{
    var list = []

    var items = table_element.find('[data-role="row"]')

    for (let i = 0; i < items.length; i++)
    {
        var category = $(items[i])
        var check = category.find('input[type="checkbox"]')
        var category_items = category.find('[data-role="medical_analysis"]')
        var medical_analysis_category_id = category.data('id')
        var medical_analysis_category_name = category.data('name')

        if ( !check.is(':checked') )
            continue
        
        list[i] = {
            id: medical_analysis_category_id,
            name: medical_analysis_category_name,
            items: []
        }
        for (let j = 0; j < category_items.length; j++) 
        {
            const item = $(category_items[j]);
            var check = item.find('input[type="checkbox"]')
            if ( !check.is(':checked') )
                continue

            list[i]['items'].push({
                id: item.data('id'),
                name: item.data('name')
            })
        }
    }

    return list;
}
// display info
displayInfo()
async function displayInfo()
{

    if ( !PatientMedicalAnalysis.id ) return

    await MEDICAL_ANALYSIS_PROMISE

    $(document).off('center-client-selected').on('center-client-selected', e =>
    {
        var detail = e.originalEvent.detail

        setOptionSelected(patient_select, PatientMedicalAnalysis.patientId)
    })

    for (let i = 0; i < PatientMedicalAnalysis.analysis.length; i++) 
    {
        const category = PatientMedicalAnalysis.analysis[i];
        if ( !category ) continue
        if ( category.items )
        {
            for (let j = 0; j < category.items.length; j++) 
            {
                const item = category.items[j];
                
                var label = $(`label[for="checkbox_${item.id}"]`)

                label.trigger('click')
            }   
        }
    }

}

})

</script>