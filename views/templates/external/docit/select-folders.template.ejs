<span id="<%= locals.componentId %>" class="pointer">

    <label for="" class="form-label"><%= UI_DISPLAY_LANG.views.pages.global.label138 %></label>
    <input type="text" class="input-text input-text-outline mb-2 border-bottom-forced select_folders_template_search_input" placeholder="<%= UI_DISPLAY_LANG.views.pages.global.placeholder5 %>">
    
    <div class="position-relative hover-parent">
        <select name="" class="input-text" id="<%= locals.selectId ? locals.selectId : 'folder_select' %>">
        
        </select>
        <div class="position-absolute top-50 start-locale-opposite-5 translate-y-50 fs-14 opacity-0 hover-opacity-1 js_clear_cache" data-trigger-input="#select_center_clients_template_search_input">
            <a href="#" class="text-color-12">
                <i class="fas fa-redo"></i>
            </a>
        </div>
    </div>

</span>

<script>

    $(async function()
    {
        const eventsReceiverId = `<%- locals.eventsReceiverId %>`
        
        const componentId = `<%- locals.componentId %>`
        const component = $('#'+componentId)
        const js_clear_cache = component.find('.js_clear_cache')

        var options = checkJSON(`<%- (locals.options) ? JSON.stringify(locals.options) : '' %>`)
        const defaultOptions = {
            hideCurrent: false,
        }

        options = {...defaultOptions, ...options}
        
        var selectId = (`<%- locals.selectId %>` == '' || `<%- locals.selectId %>` == null) ? 'folder_select' : `<%- locals.selectId %>`
        var selectionEventName = (`<%- locals.selectionEventName %>` == '' || `<%- locals.selectionEventName %>` == null) ? 'folder-selected' : `<%- locals.selectionEventName %>`

        var select_folders_template_search_input = component.find('.select_folders_template_search_input')

        var folder_select = component.find(`#${selectId}`)

        // search
        select_folders_template_search_input.on('keyup', e =>
        {
            const searchTerm = select_folders_template_search_input.val().toLowerCase();
            const options = folder_select.children()
            let firstMatchIndex = -1;
            
            if ( select_folders_template_search_input.val().length > 0 ) options.first().prop('hidden', true)
            else options.first().prop('hidden', false)
            
            options.each((k,v) =>
            {
                const option = $(v)
                const text = option.text().toLowerCase()
    
                if (text.indexOf(searchTerm) !== -1) 
                {
                    if (firstMatchIndex === -1) firstMatchIndex = k;
                    
                    option.prop('hidden', false)
                } 
                else 
                {
                    option.prop('hidden', true)
                }
            })

            if (firstMatchIndex !== -1) {
                options.eq(firstMatchIndex).prop('selected', true).attr('selected', true)
            } else {
                options.prop('selected', false).attr('selected', false)
            }
        })
  
        // display all
        select_folders_template_displayAll()
        async function select_folders_template_displayAll()
        {
            folder_select.html(`<option value=""><%= UI_DISPLAY_LANG.views.pages.global.placeholder11 %></option>`)

            // CACHE_MODEL.remove(`docit_user__${DEFAULT_INI_SETTINGS.DOCIT_USER.USER_ID}__folders`)

            var res = {}
            // check exists in cache
            if ( CACHE_MODEL.exists(`docit_user__${DEFAULT_INI_SETTINGS.DOCIT_USER.USER_ID}__folders`) )
            {
                res = CACHE_MODEL.get(`docit_user__${DEFAULT_INI_SETTINGS.DOCIT_USER.USER_ID}__folders`)
            }
            else
            {
                res = await MEDIA_MODEL.file_explorer_folders( DEFAULT_INI_SETTINGS.DOCIT_USER.USER_ID )
                CACHE_MODEL.put(`docit_user__${DEFAULT_INI_SETTINGS.DOCIT_USER.USER_ID}__folders`, res, 60) // 1 minutes
            }
            
            if ( res.code == 404 ) return

            // dispatch event
            
            var data = res.data
            var prefix = ''
            var html = ''
            // displayFolders(data[0])
            data.map((v,k) => {
                prefix = ''
                displayFolders(v)
            })


            if ( isNull(folder_select.find(':selected').val()) ) return
            dispatchCustomEvent(selectionEventName, { 
                center: {
                    id: folder_select.find(':selected').val(),
                    name: folder_select.find(':selected').text(),
                    data: checkJSON( decodeURIComponent( atob( folder_select.find(':selected').data('object') ) ) ),
                },
                eventsReceiverId: eventsReceiverId 
            }, folder_select[0])

            // 
            function displayFolders(folder)
            {
               
                var data = btoa( encodeURIComponent(JSON.stringify(folder)) )
                // console.log(folder)
                if ( folder.parent_id ) html += `<option value="${folder.id}" data-object="${data}">${prefix} ${folder.name}</option>`
                else html += `<option value="${folder.id}" data-object="${data}">${folder.name}</option>`

                // html = `<option value="${folder.id}" data-object="${data}">${folder.name}</option>`
                folder.children.map((child, k) => {
                    prefix += 'â€”'
                    displayFolders(child)
                })
                // add html
                folder_select.append(html)
                html = ''
            }
        } 
    
        // clear cache
        clearCache()
        function clearCache()
        {
            const js_clear_cache = component.find('.js_clear_cache')

            js_clear_cache.each((k, v) =>
            {
                const button = $(v)

                button.on('click', e =>
                {
                    // const triggerInput = component.find(button.data('trigger-input'))
                    CACHE_MODEL.remove(`docit_user__${DEFAULT_INI_SETTINGS.DOCIT_USER.USER_ID}__folders`)
                    select_folders_template_displayAll()

                })
            })
        }
    
    })

</script>